/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

    // Apply the application plugin to add support for building a CLI application in Java.
    application

    `maven-publish`
    id("pl.allegro.tech.build.axion-release") version "1.18.7"
}

scmVersion {
    versionIncrementer("incrementPatch")
    releaseOnlyOnReleaseBranches = true
    releaseBranchNames.set(setOf("master", "main"))
}

extra["SCM_VERSION"] = scmVersion.version
apply(from = "./projectConfig.gradle.kts")
apply(from = "./checkVersion.gradle.kts")

tasks.named("publish") {
    dependsOn("checkVersion")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.AppKt"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

afterEvaluate {
    publishing {
        publications {
            create<MavenPublication>("release") {
                groupId = extra["GROUP_ID"].toString() // Replace with your group ID
                artifactId = extra["ARTIFACT_ID"].toString() // Replace with your artifact ID
                version = extra["SCM_VERSION"].toString()

                afterEvaluate {
                    from(components["java"])
                }
            }
        }

        repositories {
            val repositoryOwner = extra["ORGANIZATION"].toString()
            val repositoryName = extra["REPO"].toString()
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/$repositoryOwner/$repositoryName")
                credentials {
                    username = extra["GH_USERNAME"].toString()
                    password = extra["GH_TOKEN"].toString()
                }
            }
        }
    }
}
